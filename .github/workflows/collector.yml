name: collect

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"   # her 15 dakikada bir

permissions:
  contents: write

env:
  # Google Drive klasör ID (gerekirse değiştir)
  DRIVE_FOLDER_ID: "1UCWuJZc2NGf0Jaynr6DKpcm7I1rfwvAM"
  PYTHON_VERSION: "3.11"
  SERVICE_JSON_PATH: "service-account.json"

jobs:
  collect:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Servis hesabı sekreti varsa JSON dosyasını yazar
      - name: Write service account file
        if: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON != '' }}
        shell: bash
        run: |
          echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}' > "$SERVICE_JSON_PATH"
          # Bazı durumlarda JSON tek satır string gibi gelir – normalize edelim
          python - <<'PY'
          import os, json
          p = os.environ["SERVICE_JSON_PATH"]
          with open(p, "r+", encoding="utf-8") as f:
              s = f.read().strip()
              if s and not s.lstrip().startswith("{"):  # kaçışlı tek satır gelebilir
                  try:
                      s = s.encode("utf-8").decode("unicode_escape")
                  except Exception:
                      pass
              f.seek(0); f.write(s); f.truncate()
          PY

      - name: Run collector (Drive → Scraper Data → data/normalized)
        env:
          # JSON oluşturulmuşsa Google API bunu otomatik kullanır
          GOOGLE_APPLICATION_CREDENTIALS: ${{ env.SERVICE_JSON_PATH }}
        shell: bash
        run: |
          set -e
          # Drive indirici – dosyaların Scraper Data içinden toplanmasını sağlar
          # Bu script Drive erişimi yoksa kendi içinde "service yok" deyip normalize'a geçebilir
          python ci/collector_gdrive_ci.py --folder-id "$DRIVE_FOLDER_ID" || true
          # Normalizasyon (CSV/Excel -> data/normalized/*.csv)
          python ci/normalize_ci.py

      - name: Show normalized files (diagnostic)
        run: |
          echo "==== data/normalized ===="
          ls -la data/normalized || true

      - name: Commit & push data changes (if any)
        shell: bash
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A data/normalized
          if git diff --cached --quiet; then
            echo "No data changes to commit."
          else
            git commit -m "Mirror & normalize Drive to data/ [skip ci]"
            git push
          fi
